@startuml 01x_translate-equipment-sequence-ids-to-ltp-uuids
skinparam responseMessageBelowArrow true

title RequestForTranslatingEquipmentSequenceIdsCausesReadingDeviceData

participant "external" as external
participant "A2LT://v1/translate-equipment-sequence-ids-to-ltp-uuids" as offeredService
participant "MWDI://...control-construct?fields=top-level-equipment" as topLevel
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}?fields=top-level-equipment" as topLevel
participant "MWDI://.../equipment={uuid}?fields=contained-holder(occupying-fru;sequence-id);connector(local-id;sequence-id)" as equipment
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}/equipment={uuid}?fields=contained-holder(occupying-fru;sequence-id);connector(local-id;sequence-id)" as equipment
participant "MWDI://...control-construct?fields=logical-termination-point(uuid;ltp-augment-1-0:ltp-augment-pac(equipment;connector))" as ltpList
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}?fields=logical-termination-point(uuid;ltp-augment-1-0:ltp-augment-pac(equipment;connector))" as ltpList
participant "MWDI://...control-construct/logical-termination-point={uuid}?fields=server-ltp;client-ltp;layer-protocol(layer-protocol-name)" as clientLtp
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}/logical-termination-point={uuid}?fields=server-ltp;client-ltp;layer-protocol(layer-protocol-name)" as clientLtp

external -> offeredService : {mountName, \n stringOfConcatenatedSequenceIds, \n topLevelEquipmentUuid (optional)} \n (apiKeyAuth)

note over offeredService
  <u> ReadingUuidsOfTopLevelEquipment </u>
end note
offeredService -> topLevel : {mountName}
topLevel --> offeredService : {[TopLevelUuids]}

note over offeredService
  IF (topLevelEquipmentUuid provided and not contained in [TopLevelUuids])
     OR (topLevelEquipmentUuid not provided and [TopLevelUuids].size>1)
    THEN exit with error response
end note
offeredService --> external : <i>error response code</i>
note over offeredService
  IF topLevelEquipmentUuid provided and contained in [TopLevelUuids]
    THEN uuid=topLevelEquipmentUuid
  ELSE
    THEN uuid=first uuid in [TopLevelUuids]

  <u> ReadingEquipmentDataOfTopLevelElement </u>
end note
offeredService -> equipment : {uuid}
equipment --> offeredService : {[containedHolders(occupying-fru,sequence-id)], [connectors(local-id,sequence-id)]}

group Repeat for each sequenceId in stringOfConcatenatedSequenceIds #pink
  note over offeredService
    Store all seen equipmentUuid, connectorLocalId pairs temporarly in memory for usage in subsequent steps

    IF (sequenceId == h*)
      THEN nextUuid = containedHolder.occupying-fru of holder instance with sequence-id == sequenceId

    IF (sequenceId == c*)
      THEN 
        equipmentUuid = nextUuid
        connectorLocalId = connector.local-id connector instance with sequence-id == sequenceId
        <i>(store this equipmentUuid, connectorLocalId pair in memory)</i>

    <u> ReadingEquipmentDataInHolder </u>
  end note
  offeredService -> equipment : {nextUuid}
  equipment --> offeredService : {[containedHolders(occupying-fru,sequence-id)], [connectors(local-id,sequence-id)]}
end

note over offeredService
  <u> ReadingAugmentOfAllLtps </u>
end note
offeredService -> ltpList : {mountName}
ltpList --> offeredService : {list of(ltpUuid, [equipment], connector)}

note over offeredService
  WITH rEquip = (ReadingEquipmentDataInHolder pair info from memory) 
       and rAug = (ReadingAugmentOfAllLtps.response.body)

  WITH LowestLtp == rAug.ltpUuid
  WHERE 1st entry from rAug.equipment==rEquip.equipmentUuid 
        AND rAug.connector==rEquip.connectorLocalId
    <u> ReadingServingLtp </u>
end note
  offeredService -> clientLtp : {mountName, uuid==LowestLtp}
  clientLtp --> offeredService : {[clientLtps], [serverLtps], [layer-protocol(layer-protocol-name)]}

group Repeat recursively for first uuid from '[clientLtps]'
  note over offeredService
    for first iteration [clientLtps] = ReadingServingLtp.[clientLtps],
    for subsequent iterations [clientLtps] = child-[clientLtps]
      <u> ReadingClientLtp </u>
  end note
  offeredService -> clientLtp : {mountName, uuid}
  clientLtp --> offeredService : {[clientLtps], [serverLtps], [layer-protocol(layer-protocol-name)]}
end

offeredService --> external : {list of-\n(uuid,[clientLtps], [serverLtps],\n[layer-protocol-names])}

@enduml