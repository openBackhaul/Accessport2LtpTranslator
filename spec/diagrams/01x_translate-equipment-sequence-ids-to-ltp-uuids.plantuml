@startuml 01x_translate-equipment-sequence-ids-to-ltp-uuids
skinparam responseMessageBelowArrow true

title RequestForTranslatingEquipmentSequenceIdsCausesReadingDeviceData

participant "external" as external
participant "A2LT://v1/translate-equipment-sequence-ids-to-ltp-uuids" as offeredService
participant "MWDI://...control-construct?fields=top-level-equipment" as topLevel
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}?fields=top-level-equipment" as topLevel'
participant "MWDI://.../equipment={uuid}?fields=contained-holder;connector" as equipment
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}/equipment={uuid}?fields=contained-holder;connector" as equipment'
participant "MWDI://...control-construct?fields=logical-termination-point(uuid;ltp-augment-1-0:ltp-augment-pac(equipment;connector))" as ltpList
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}?fields=logical-termination-point(uuid;ltp-augment-1-0:ltp-augment-pac(equipment;connector))" as ltpList'
participant "MWDI://...control-construct/logical-termination-point={uuid}?fields=server-ltp;client-ltp;layer-protocol(layer-protocol-name)" as clientLtp
  ' complete path: participant "MWDI://core-model-1-4:network-control-domain=cache/control-construct={mountName}/logical-termination-point={uuid}?fields=server-ltp;client-ltp;layer-protocol(layer-protocol-name)" as clientLtp'

external -> offeredService : {mountName, \n stringOfConcatenatedSequenceIds, \n topLevelEquipmentUuid (optional)} \n (apiKeyAuth)

note over offeredService
  <u> ReadingUuidsOfTopLevelEquipment </u>
end note
offeredService -> topLevel : {mountName}
topLevel --> offeredService : {[TopLevelUuids]}

note over offeredService
  If (topLevelEquipmentUuid provided and not contained in [TopLevelUuids])
     or (topLevelEquipmentUuid not provided and [TopLevelUuids].size>1)
    then exit with error response
end note
offeredService --> external : <i>error response code</i>
note over offeredService
  if topLevelEquipmentUuid provided and contained in [TopLevelUuids]
    then uuid=topLevelEquipmentUuid
  else
    then uuid=first uuid in [TopLevelUuids]
  <u> ReadingEquipmentDataOfTopLevelElement </u>
end note
offeredService -> equipment : {uuid}
equipment --> offeredService : {[containedHolders], [connectors]}

group Repeat until last entry in stringOfConcatenatedSequenceIds
  note over offeredService
    if letter infront of sequenceId == h
    then nextUuid = occupying-fru of instance of holder with sequence-id == sequenceId

    if letter infront of sequenceId == c
    then 
      equipmentUuid = nextUuid
      connectorLocalId = local-id of instance of connector with sequence-id == sequenceId

    <u> ReadingEquipmentDataInHolder </u>
  end note
  offeredService -> equipment : {nextUuid}
  equipment --> offeredService : {[containedHolders], [connectors]}
end

note over offeredService
  <u> ReadingAugmentOfAllLtps </u>
end note
offeredService -> ltpList : {mountName}
ltpList --> offeredService : {list of(ltpUuid, equipment, connector)}

note over offeredService
  LowestLtp == ltpUuid for equipment==equipmentUuid AND connector==connectorLocalId
end note

note over offeredService
  <u> ReadingServingLtp </u>
end note
  offeredService -> clientLtp : {mountName, uuid==LowestLtp}
  clientLtp --> offeredService : {[clientLtps], [serverLtps], [layer-protocol(layer-protocol-name)]}

group Repeat recursively for first uuid from '[clientLtps]'
  note over offeredService
    for first iteration [clientLtps] = ReadingServingLtp.[clientLtps],
    for subsequent iterations [clientLtps] = child-[clientLtps]
      <u> ReadingClientLtp </u>
  end note
  offeredService -> clientLtp : {mountName, uuid}
  clientLtp --> offeredService : {[clientLtps], [serverLtps], [layer-protocol(layer-protocol-name)]}
end



offeredService --> external : {list of-\n(uuid,[clientLtps], [serverLtps],\n[layer-protocol-names])}

@enduml